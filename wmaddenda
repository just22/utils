#!/bin/sh

get_workarea_info() {
        # For the sake of simplicity, let's consider that all DESKTOPs have
        # the same working area (this is tipically the case)
        if [ $# -ne 1 ]; then
                echo "Usage: get_workarea_info <xorig|yorig|xdim|ydim>"
                return 1
        fi
        PARAM="$1"
        NET_WORKAREA=$(xprop -root |
                        grep "^_NET_WORKAREA(CARDINAL)" |
                        awk 'BEGIN{FS="="} {print $2}' |
                        tr -d " ")
        case "$PARAM" in
        xorig)
                FIELD_NO=1
                ;;
        yorig)
                FIELD_NO=2
                ;;
        xdim)
                FIELD_NO=3
                ;;
        ydim)
                FIELD_NO=4
                ;;
        *)
                echo "get_workarea_info: wrong arg"
                return 2
                ;;
        esac
        echo $NET_WORKAREA |
                awk -v FIELD=$FIELD_NO 'BEGIN{FS=","} {print $FIELD}'
        return 0
}

get_win_ids () {
        xprop -root |
        grep "^_NET_CLIENT_LIST(WINDOW)" | grep -o "0x[0-9a-fA-F]\+"
        return 0
}

get_current_ws () {
        xprop -root |
        grep "^_NET_CURRENT_DESKTOP(CARDINAL)" |
        grep -o "[0-9]\+"
        return 0
}

get_active_win () {
        xprop -root |
        grep "^_NET_ACTIVE_WINDOW(WINDOW)" |
        egrep -o "0x[0-9a-fA-F]{2,}"
        return 0
}

get_not_active_visible_win () {
        for winId in $(get_win_ids); do
                XPROP="$(xprop -id $winId)"
                [ "$winId" != "$(get_active_win)" ] &&
                        ! (echo "$XPROP" | grep "_NET_WM_WINDOW_TYPE_DOCK" > /dev/null 2>&1) &&
                        [ "$(echo "$XPROP" | grep "^_NET_WM_DESKTOP(CARDINAL)" |
                                grep -o "[0-9]\+")" = $(get_current_ws) ] &&
                        (echo "$XPROP" | grep "window state: Normal" > /dev/null 2>&1 ) &&
                        echo $winId
        done
        return 0
}

get_win_border () {
        if [ $# -ne 2 ]; then
                echo "Usage: get_win_border <winID> <xdir|ydir>"
                return 1
        fi
        WIN_ID="$1"
        DIR="$2"
        case "$DIR" in
        xdir)
                FIELD_1=1
                FIELD_2=2
                ;;
        ydir)
                FIELD_1=3
                FIELD_2=4
                ;;
        *)
                echo "get_win_border: wrong arg"
                return 2
                ;;
        esac
        xprop -id "$WIN_ID" |
                grep "^_NET_FRAME_EXTENTS(CARDINAL)" |
                awk 'BEGIN{FS="="} {print $2}' |
                tr -d " " |
                awk -v FIELD_1="$FIELD_1" -v FIELD_2="$FIELD_2" \
                        'BEGIN{FS=","} {print $FIELD_1+$FIELD_2}'
        return 0
}

tile2 () {
        if [ $# -ne 3 ]; then
                echo "Usage: tile2 <h|v> <mainWinFactor> <tileGap>"
                return 1
        fi
        TILE_DIR="$1"
        DIM_FACTOR="$2"
        TILE_GAP="$3"

        ACTIVE_WIN_ID=$(get_active_win)
        OTHER_WIN_ID=$(get_not_active_visible_win | head -n 1)

        # Active win placement
        case "$TILE_DIR" in
        h)
                wmctrl -i -r $ACTIVE_WIN_ID -b remove,maximized_horz,maximized_vert
                Y_ORIG=$(get_workarea_info yorig)
                Y_DIM=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info ydim) * $DIM_FACTOR - $(get_win_border $ACTIVE_WIN_ID ydir) - $TILE_GAP / 2" | bc))
                wmctrl -i -r $ACTIVE_WIN_ID -b add,maximized_horz
                wmctrl -i -r $ACTIVE_WIN_ID -e 0,-1,$Y_ORIG,-1,$Y_DIM
                ;;
        v)
                wmctrl -i -r $ACTIVE_WIN_ID -b remove,maximized_horz,maximized_vert
                X_ORIG=$(get_workarea_info xorig)
                X_DIM=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info xdim) * $DIM_FACTOR - $(get_win_border $ACTIVE_WIN_ID xdir) - $TILE_GAP / 2" | bc))
                wmctrl -i -r $ACTIVE_WIN_ID -b add,maximized_vert
                wmctrl -i -r $ACTIVE_WIN_ID -e 0,$X_ORIG,-1,$X_DIM,-1
                ;;
        *)
                echo "tile2: wrong tiling direction"
                return 2
                ;;
        esac

        # Other win placement
        case "$TILE_DIR" in
        h)
                wmctrl -i -r $OTHER_WIN_ID -b remove,maximized_horz,maximized_vert
                Y_ORIG=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info yorig) + $(get_workarea_info ydim) * $DIM_FACTOR + $TILE_GAP / 2" | bc))
                Y_DIM=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info ydim) * (1 - $DIM_FACTOR) - $(get_win_border $OTHER_WIN_ID ydir) - $TILE_GAP / 2" | bc))
                wmctrl -i -r $OTHER_WIN_ID -b add,maximized_horz
                wmctrl -i -r $OTHER_WIN_ID -e 0,-1,$Y_ORIG,-1,$Y_DIM
                ;;
        v)
                wmctrl -i -r $OTHER_WIN_ID -b remove,maximized_horz,maximized_vert
                X_ORIG=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info xorig) + $(get_workarea_info xdim) * $DIM_FACTOR + $TILE_GAP / 2" | bc))
                X_DIM=$(printf "%.0f" $(echo "scale=3; $(get_workarea_info xdim) * (1 - $DIM_FACTOR) - $(get_win_border $OTHER_WIN_ID xdir) - $TILE_GAP / 2" | bc))
                wmctrl -i -r $OTHER_WIN_ID -b add,maximized_vert
                wmctrl -i -r $OTHER_WIN_ID -e 0,$X_ORIG,-1,$X_DIM,-1
                ;;
        *)
                echo "tile2: wrong tiling direction"
                return 2
                ;;
        esac
}


# Main
if [ $# -eq 0 ]; then
        echo "Usage: $(basename $0) <command> [options...]"
        exit 1
fi

ACTION="$1"

case "$ACTION" in
tile2)
        if [ $# -ne 4 ]; then
                echo "$ACTION: wrong number of params"
                exit 2
        fi
        TILE_DIR="$2"
        DIM_FACTOR="$3"
        TILE_GAP="$4"
        tile2 "$TILE_DIR" "$DIM_FACTOR" "$TILE_GAP"
        ;;
*)
        echo "$ACTION: unknown action"
        exit 3
        ;;
esac

exit 0
